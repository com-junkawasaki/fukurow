name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - 1.70.0  # MSRV

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Run cargo check
      run: cargo check --workspace

    - name: Run tests
      run: cargo test --workspace --verbose

    - name: Run tests with all features
      run: cargo test --workspace --all-features --verbose

    - name: Check WASM compilation
      run: |
        rustup target add wasm32-unknown-unknown
        cargo check --target wasm32-unknown-unknown --workspace --features wasm

    - name: Generate coverage report
      if: matrix.rust == 'stable'
      run: |
        cargo install cargo-tarpaulin
        cargo tarpaulin --workspace --out Xml --output-dir coverage/

    - name: Upload coverage to Codecov
      if: matrix.rust == 'stable'
      uses: codecov/codecov-action@v3
      with:
        file: coverage/cobertura.xml
        fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --workspace --all-features -- -D warnings

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  publish-dry-run:
    name: Publish Dry Run
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Dry run publish check
      run: |
        # Check publish order - core crates first
        cargo publish --dry-run --manifest-path crates/fukurow-core/Cargo.toml
        cargo publish --dry-run --manifest-path crates/fukurow-store/Cargo.toml
        cargo publish --dry-run --manifest-path crates/fukurow-rules/Cargo.toml
        cargo publish --dry-run --manifest-path crates/fukurow-sparql/Cargo.toml
        cargo publish --dry-run --manifest-path crates/fukurow-shacl/Cargo.toml
        cargo publish --dry-run --manifest-path crates/fukurow-rdfs/Cargo.toml
        cargo publish --dry-run --manifest-path crates/fukurow-lite/Cargo.toml
        cargo publish --dry-run --manifest-path crates/fukurow-dl/Cargo.toml
        cargo publish --dry-run --manifest-path crates/fukurow-engine/Cargo.toml
        cargo publish --dry-run --manifest-path crates/fukurow-domain-cyber/Cargo.toml
        cargo publish --dry-run --manifest-path crates/fukurow-siem/Cargo.toml
        cargo publish --dry-run --manifest-path crates/fukurow-api/Cargo.toml
        cargo publish --dry-run --manifest-path crates/fukurow-cli/Cargo.toml
        cargo publish --dry-run --manifest-path crates/fukurow/Cargo.toml

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-criterion
      run: cargo install cargo-criterion

    - name: Run benchmarks
      run: cargo criterion --workspace

    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        name: Rust Benchmark
        tool: 'cargo'
        output-file-path: output.txt
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [test, lint, security-audit]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-release
      run: cargo install cargo-release

    - name: Publish to crates.io
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
      run: |
        # Publish in dependency order
        cargo publish --manifest-path crates/fukurow-core/Cargo.toml
        sleep 30
        cargo publish --manifest-path crates/fukurow-store/Cargo.toml
        sleep 30
        cargo publish --manifest-path crates/fukurow-rules/Cargo.toml
        sleep 30
        cargo publish --manifest-path crates/fukurow-sparql/Cargo.toml
        sleep 30
        cargo publish --manifest-path crates/fukurow-shacl/Cargo.toml
        sleep 30
        cargo publish --manifest-path crates/fukurow-rdfs/Cargo.toml
        sleep 30
        cargo publish --manifest-path crates/fukurow-lite/Cargo.toml
        sleep 30
        cargo publish --manifest-path crates/fukurow-dl/Cargo.toml
        sleep 30
        cargo publish --manifest-path crates/fukurow-engine/Cargo.toml
        sleep 30
        cargo publish --manifest-path crates/fukurow-domain-cyber/Cargo.toml
        sleep 30
        cargo publish --manifest-path crates/fukurow-siem/Cargo.toml
        sleep 30
        cargo publish --manifest-path crates/fukurow-api/Cargo.toml
        sleep 30
        cargo publish --manifest-path crates/fukurow-cli/Cargo.toml
        sleep 30
        cargo publish --manifest-path crates/fukurow/Cargo.toml

  deploy-demo:
    name: Deploy Demo
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test, lint]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      working-directory: astoro
      run: npm ci

    - name: Build demo site
      working-directory: astoro
      run: npm run build

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: astoro/dist
